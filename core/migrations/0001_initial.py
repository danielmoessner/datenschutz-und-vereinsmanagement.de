# Generated by Django 4.0.3 on 2022-04-08 15:39

import ckeditor_uploader.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_account_required', models.BooleanField(default=False, verbose_name='Nur f√ºr eingeloggte Benutzer sichtbar')),
                ('author', models.CharField(max_length=200, verbose_name='Autor')),
                ('title', models.CharField(max_length=200, verbose_name='Titel')),
                ('slug', models.SlugField(help_text='Der Name klein geschrieben und ohne Leerzeichen oder Sonderzeichen.', unique=True, verbose_name='Slug')),
                ('date', models.DateField(verbose_name='Datum')),
                ('description', models.TextField(verbose_name='Beschreibung')),
                ('image', models.ImageField(upload_to='article-images/', verbose_name='Bild')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Inhalt')),
            ],
            options={
                'verbose_name': 'Artikel',
                'verbose_name_plural': 'Artikel',
            },
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('url', models.CharField(blank=True, max_length=200, verbose_name='Url')),
                ('location', models.CharField(choices=[('HEAD', 'Head'), ('BODY', 'Body')], help_text='Where is the code supposed to be?', max_length=200, verbose_name='Location')),
                ('code', models.TextField(help_text='The code is not validated and should be correct.', verbose_name='Code')),
            ],
            options={
                'verbose_name': 'Code',
                'verbose_name_plural': 'Code',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TextField(verbose_name='Zeit')),
                ('text', models.TextField(verbose_name='Bildung')),
            ],
            options={
                'verbose_name': 'Bildung',
                'verbose_name_plural': 'Bildungen',
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TextField(verbose_name='Zeit')),
                ('text', models.TextField(verbose_name='Erfahrung')),
            ],
            options={
                'verbose_name': 'Erfahrung',
                'verbose_name_plural': 'Erfahrungen',
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='Seo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, help_text='Aktiviert sich bei dieser Url. Wenn leer immer aktiv.', max_length=200, unique=True, verbose_name='Url')),
                ('title_tag', models.CharField(max_length=60, verbose_name='Titel')),
                ('meta_description', models.TextField(blank=True, max_length=160, null=True, verbose_name='Beschreibung')),
            ],
            options={
                'verbose_name': 'Seo Einstellung',
                'verbose_name_plural': 'Seo Einstellungen',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('slug', models.SlugField(help_text='Der Name klein geschrieben und ohne Leerzeichen oder Sonderzeichen.', unique=True, verbose_name='Slug')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Inhalt')),
            ],
            options={
                'verbose_name': 'Leistung',
                'verbose_name_plural': 'Leistungen',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField()),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=200)),
                ('content', models.TextField()),
            ],
            options={
                'verbose_name': 'Textbaustein',
                'verbose_name_plural': 'Textbausteine',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
